name: Kernel Build CI

on:
  push:
    branches: [ "rpi-6.6.y" ]
  pull_request:
    branches: [ "rpi-6.6.y" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout the source code
    - name: Checkout source code
      uses: actions/checkout@v4

    # Install dependencies
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu make bc bison flex libssl-dev libelf-dev

    # Build the kernel
    - name: Build kernel
      run: |
        mkdir -p build_output/boot/overlays
        export ARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-
        make bcm2712_defconfig
        make -j$(nproc) Image.gz dtbs modules
        cp arch/arm64/boot/Image.gz build_output/boot/kernel8.img
        cp arch/arm64/boot/dts/broadcom/*.dtb build_output/boot/ || true
        cp arch/arm64/boot/dts/overlays/*.dtb* build_output/boot/overlays/ || true
        make modules_install INSTALL_MOD_PATH=$(pwd)/build_output

    # Package the kernel build
    - name: Package kernel build
      run: |
        tar -czvf kernel_build.tar.gz -C build_output .

    # Upload the kernel build artifact
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: kernel-build
        path: kernel_build.tar.gz
        retention-days: 90

    # Set up Dockerfile in the build directory
    - name: Set up Dockerfile
      run: |
        mkdir -p build_output
        echo '
        FROM ubuntu:20.04
        COPY . /kernel-build
        WORKDIR /kernel-build
        CMD ["ls", "-l"]
        ' > build_output/Dockerfile

    # Debugging step to confirm the files
    - name: Confirm files
      run: ls -la build_output

    # Build the Docker image
    - name: Build Docker image
      env:
        IMAGE_TAG: ghcr.io/${{ github.repository_owner }}/kernel-image:$(date +%s)
      run: |
        docker build "build_output" -f "build_output/Dockerfile" -t "$IMAGE_TAG"
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    # Push the Docker image to GHCR
    - name: Push Docker image
      env:
        CR_PAT: ${{ secrets.CR_PAT }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
      run: |
        echo "${CR_PAT}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        docker push "$IMAGE_TAG"
